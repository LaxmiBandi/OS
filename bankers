#include <stdio.h>
#include <stdbool.h>

int n, m; // n = number of processes, m = number of resources
int allocation[10][10], max[10][10], need[10][10], available[10];
int safeSequence[10];

bool isSafe() {
    int work[10], finish[10] = {0}, count = 0;
    for (int i = 0; i < m; i++)
        work[i] = available[i];

    while (count < n) {
        bool found = false;
        for (int i = 0; i < n; i++) {
            if (!finish[i]) {
                bool possible = true;
                for (int j = 0; j < m; j++) {
                    if (need[i][j] > work[j]) {
                        possible = false;
                        break;
                    }
                }

                if (possible) {
                    for (int k = 0; k < m; k++)
                        work[k] += allocation[i][k];

                    safeSequence[count++] = i;
                    finish[i] = 1;

                    printf("P%d is visited( ", i);
                    for (int k = 0; k < m; k++)
                        printf("%d ", work[k]);
                    printf(")\n");

                    found = true;
                }
            }
        }

        if (!found)
            return false;
    }

    return true;
}

void printTable() {
    printf("\n%-10s%-15s%-15s%-15s\n", "Process", "Allocation", "Max", "Need");
    for (int i = 0; i < n; i++) {
        printf("P%-9d", i);
        for (int j = 0; j < m; j++)
            printf("%d ", allocation[i][j]);
        printf("%6s", "");

        for (int j = 0; j < m; j++)
            printf("%d ", max[i][j]);
        printf("%6s", "");

        for (int j = 0; j < m; j++)
            printf("%d ", need[i][j]);
        printf("\n");
    }
}

int main() {
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resources: ");
    scanf("%d", &m);

    for (int i = 0; i < n; i++) {
        printf("Enter allocation for P%d: ", i);
        for (int j = 0; j < m; j++)
            scanf("%d", &allocation[i][j]);

        printf("Enter max for P%d: ", i);
        for (int j = 0; j < m; j++)
            scanf("%d", &max[i][j]);

        for (int j = 0; j < m; j++)
            need[i][j] = max[i][j] - allocation[i][j];
    }

    printf("Enter available resources: ");
    for (int i = 0; i < m; i++)
        scanf("%d", &available[i]);

    char choice;
    printf("Do you want to enter a new request? (y/n): ");
    scanf(" %c", &choice);

    if (choice == 'y') {
        int pid, request[10];
        printf("Enter process id: ");
        scanf("%d", &pid);

        printf("Enter request for resources: ");
        for (int i = 0; i < m; i++)
            scanf("%d", &request[i]);

        bool canGrant = true;
        for (int i = 0; i < m; i++) {
            if (request[i] > need[pid][i] || request[i] > available[i]) {
                canGrant = false;
                break;
            }
        }

        if (!canGrant) {
            printf("Request cannot be granted.\n");
        } else {
            // Temporarily allocate
            for (int i = 0; i < m; i++) {
                available[i] -= request[i];
                allocation[pid][i] += request[i];
                need[pid][i] -= request[i];
            }

            if (isSafe()) {
                printf("SYSTEM IS IN SAFE STATE\nSafe Sequence: ");
                for (int i = 0; i < n; i++)
                    printf("P%d ", safeSequence[i]);
                printf("\n");
            } else {
                printf("SYSTEM IS NOT IN SAFE STATE\n");

                // Rollback
                for (int i = 0; i < m; i++) {
                    available[i] += request[i];
                    allocation[pid][i] -= request[i];
                    need[pid][i] += request[i];
                }
            }
        }
    } else {
        if (isSafe()) {
            printf("SYSTEM IS IN SAFE STATE\nSafe Sequence: ");
            for (int i = 0; i < n; i++)
                printf("P%d ", safeSequence[i]);
            printf("\n");
        } else {
            printf("SYSTEM IS NOT IN SAFE STATE\n");
        }
    }

    printTable();
    return 0;
}
