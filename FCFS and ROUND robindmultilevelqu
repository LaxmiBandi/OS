#include <stdio.h>

#define MAX 10

void sortByArrival(int p[], int at[], int bt[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (at[j] > at[j + 1]) {
                int temp;
                temp = at[j];
                at[j] = at[j + 1];
                at[j + 1] = temp;

                temp = bt[j];
                bt[j] = bt[j + 1];
                bt[j + 1] = temp;

                temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }
}

// Round Robin Scheduling
void roundRobinScheduling(int p[], int at[], int bt[], int n, int quantum) {
    int rem_bt[MAX], time = 0;
    int tat[MAX], wt[MAX];
    float total_tat = 0, total_wt = 0;

    for (int i = 0; i < n; i++) {
        rem_bt[i] = bt[i];
    }

    printf("\nExecution Order (Round Robin):\n");

    while (1) {
        int all_done = 1;

        for (int i = 0; i < n; i++) {
            if (rem_bt[i] > 0) {
                all_done = 0;

                int exec_time = (rem_bt[i] <= quantum) ? rem_bt[i] : quantum;
                rem_bt[i] -= exec_time;
                time += exec_time;

                printf("Process P%d starts at time %d\n", p[i], time - exec_time);
                printf("Process P%d ends at time %d\n", p[i], time);

                tat[i] = time - at[i];
                wt[i] = tat[i] - bt[i];
                total_tat += tat[i];
                total_wt += wt[i];
            }
        }

        if (all_done) break;
    }

    printf("\nProcess\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\n", p[i], tat[i], wt[i]);
    }

    printf("\nAverage Turnaround Time: %.2f\n", total_tat / n);
    printf("Average Waiting Time: %.2f\n", total_wt / n);
}

// First Come First Serve Scheduling
void fcfsScheduling(int p[], int at[], int bt[], int n) {
    int time = 0;
    int tat[MAX], wt[MAX];
    float total_tat = 0, total_wt = 0;

    printf("\nExecution Order (FCFS):\n");

    for (int i = 0; i < n; i++) {
        if (time < at[i]) {
            time = at[i];
        }

        printf("Process P%d starts at time %d\n", p[i], time);
        time += bt[i];
        printf("Process P%d ends at time %d\n", p[i], time);

        tat[i] = time - at[i];
        wt[i] = tat[i] - bt[i];
        total_tat += tat[i];
        total_wt += wt[i];
    }

    printf("\nProcess\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\n", p[i], tat[i], wt[i]);
    }

    printf("\nAverage Turnaround Time: %.2f\n", total_tat / n);
    printf("Average Waiting Time: %.2f\n", total_wt / n);
}

void scheduleProcesses(int p[], int at[], int bt[], int priority[], int n, int quantum) {
    int sys_p[MAX], sys_at[MAX], sys_bt[MAX];
    int user_p[MAX], user_at[MAX], user_bt[MAX];
    int sys_count = 0, user_count = 0;

    // Split processes into system and user based on priority
    for (int i = 0; i < n; i++) {
        if (priority[i] == 0) {
            sys_p[sys_count] = p[i];
            sys_at[sys_count] = at[i];
            sys_bt[sys_count++] = bt[i];
        } else {
            user_p[user_count] = p[i];
            user_at[user_count] = at[i];
            user_bt[user_count++] = bt[i];
        }
    }

    // Sort both system and user processes by arrival time
    sortByArrival(sys_p, sys_at, sys_bt, sys_count);
    sortByArrival(user_p, user_at, user_bt, user_count);

    // Execute Round Robin for system processes
    printf("\nSystem Processes (Round Robin):\n");
    roundRobinScheduling(sys_p, sys_at, sys_bt, sys_count, quantum);

    // Execute FCFS for user processes
    printf("\nUser Processes (FCFS):\n");
    fcfsScheduling(user_p, user_at, user_bt, user_count);
}

int main() {
    int n, quantum;
    int p[MAX], at[MAX], bt[MAX], priority[MAX];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter process details (PID, Arrival Time, Burst Time, Priority [0-System, 1-User]):\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d %d %d %d", &p[i], &at[i], &bt[i], &priority[i]);
    }

    printf("Enter Time Quantum for Round Robin: ");
    scanf("%d", &quantum);

    scheduleProcesses(p, at, bt, priority, n, quantum);

    return 0;
}
